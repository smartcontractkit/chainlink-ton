name: Temp Test MyLocalTON

# todo: build from source & cache layer vs cache prepublished images
# todo: version management for prepublished images
on:
  push:
    branches:
      - feature/mylocalton
  pull_request:

jobs:
  test-localnet:
    name: Testing MyLocalTON
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

# Check if we have cached volumes
      - name: Check for cached volumes
        id: cache-volumes
        uses: actions/cache@v4
        with:
          path: |
            ~/.ton-volumes/shared-data
            ~/.ton-volumes/ton-db
            ~/.ton-volumes/postgres-data
            ~/.ton-volumes/index-workdir
          key: ${{ runner.os }}-ton-volumes-${{ hashFiles('docker-compose.yaml') }}
          restore-keys: |
            ${{ runner.os }}-ton-volumes-

      # Setup volume directories (will be empty on first run)
      - name: Prepare volume directories
        run: |
          mkdir -p ~/.ton-volumes/shared-data
          mkdir -p ~/.ton-volumes/ton-db
          mkdir -p ~/.ton-volumes/postgres-data
          mkdir -p ~/.ton-volumes/index-workdir
          chmod -R 777 ~/.ton-volumes
          
          if [ "${{ steps.cache-volumes.outputs.cache-hit }}" == "true" ]; then
            echo "::notice::Using cached volumes from previous run"
            # Configure docker-compose to use bind mounts
            echo "VOLUME_DRIVER=local" >> $GITHUB_ENV
            
            # shared-data volume
            echo "SHARED_DATA_O_OPT=bind" >> $GITHUB_ENV
            echo "SHARED_DATA_TYPE_OPT=none" >> $GITHUB_ENV
            echo "SHARED_DATA_DEVICE_OPT=$HOME/.ton-volumes/shared-data" >> $GITHUB_ENV
            
            # ton-db volume
            echo "TON_DB_O_OPT=bind" >> $GITHUB_ENV
            echo "TON_DB_TYPE_OPT=none" >> $GITHUB_ENV
            echo "TON_DB_DEVICE_OPT=$HOME/.ton-volumes/ton-db" >> $GITHUB_ENV
            
            # postgres-data volume
            echo "POSTGRES_DATA_O_OPT=bind" >> $GITHUB_ENV
            echo "POSTGRES_DATA_TYPE_OPT=none" >> $GITHUB_ENV
            echo "POSTGRES_DATA_DEVICE_OPT=$HOME/.ton-volumes/postgres-data" >> $GITHUB_ENV
            
            # index-workdir volume
            echo "INDEX_WORKDIR_O_OPT=bind" >> $GITHUB_ENV
            echo "INDEX_WORKDIR_TYPE_OPT=none" >> $GITHUB_ENV
            echo "INDEX_WORKDIR_DEVICE_OPT=$HOME/.ton-volumes/index-workdir" >> $GITHUB_ENV
          else
            echo "::notice::First run - initializing new volumes"
          fi
      - name: Pull and tag images from GitHub Container Registry
        run: |
          TARGET_REGISTRY="ghcr.io/${{ github.repository }}"
          
          IMAGES=(
            "ghcr.io/neodix42/mylocalton-docker:latest" 
            "ghcr.io/neodix42/ton-http-api:latest"
            "ghcr.io/neodix42/mylocalton-docker-faucet:latest"
            "redis:latest"
            "postgres:17"
            "toncenter/ton-indexer-classifier:v1.2.0-test"
            "toncenter/ton-indexer-api:v1.2.0-test"
            "toncenter/ton-indexer-worker:v1.2.0-test"
          )

          # always push to cache for testing
          SHOULD_PUSH=false
          
          for IMG in "${IMAGES[@]}"; do
            # Extract image name and tag
            IMG_NAME=$(echo $IMG | cut -d: -f1 | sed 's|.*/||')
            IMG_TAG=$(echo $IMG | cut -d: -f2)

            TARGET_IMG="${TARGET_REGISTRY}/mylocalton-${IMG_NAME}:${IMG_TAG}"
            
            if docker manifest inspect ${TARGET_IMG} &>/dev/null; then
              echo "${TARGET_IMG} already exists in registry, using it"
              docker pull ${TARGET_IMG}
            else
              echo "${TARGET_IMG} not found, pulling from source"
              docker pull ${IMG}
              docker tag ${IMG} ${TARGET_IMG}
              
              if [[ "$SHOULD_PUSH" == "true" ]]; then
                echo "Pushing ${TARGET_IMG} to registry for future runs"
                docker push ${TARGET_IMG}
              fi
            fi
            
            docker tag ${TARGET_IMG} ${IMG}
          done
          
          docker images

      - name: Install Nix
        uses: cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f # v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Start TON Local Network
        id: ton-startup
        run: |
          # Record start time
          start_time=$(date +%s)
          
          # Start the network (using environment variables for volume configuration)
          chmod +x scripts/localnet-up.sh
          scripts/localnet-up.sh
          
          # Record end time and calculate duration
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "startup_duration=${duration}" >> $GITHUB_OUTPUT
          
          echo "TON network startup completed in ${duration} seconds"
          
          # If this is the first run, copy the volumes to cache location
          if [ "${{ steps.cache-volumes.outputs.cache-hit }}" != "true" ]; then
            echo "First run - copying volumes to cache location"
            
            # Get volume locations
            SHARED_DATA_VOL=$(docker volume inspect --format '{{ .Mountpoint }}' shared-data)
            TON_DB_VOL=$(docker volume inspect --format '{{ .Mountpoint }}' ton-db)
            POSTGRES_DATA_VOL=$(docker volume inspect --format '{{ .Mountpoint }}' postgres-data)
            INDEX_WORKDIR_VOL=$(docker volume inspect --format '{{ .Mountpoint }}' index-workdir)
            
            # Copy contents to cache directories
            sudo cp -a ${SHARED_DATA_VOL}/. ~/.ton-volumes/shared-data/
            sudo cp -a ${TON_DB_VOL}/. ~/.ton-volumes/ton-db/
            sudo cp -a ${POSTGRES_DATA_VOL}/. ~/.ton-volumes/postgres-data/
            sudo cp -a ${INDEX_WORKDIR_VOL}/. ~/.ton-volumes/index-workdir/
            
            # Fix permissions
            sudo chmod -R 777 ~/.ton-volumes
          fi
      
          
      - name: Run build
        run: |
          pushd contracts
          nix develop .#contracts -c yarn && yarn build
          
      - name: Run tests
        run: |
          pushd contracts
          nix develop .#contracts -c yarn test

      - name: Report startup performance
        run: |
          echo "::notice::TON network startup time: ${{ steps.ton-startup.outputs.startup_duration }} seconds (Cache hit: ${{ steps.cache-volumes.outputs.cache-hit }})"