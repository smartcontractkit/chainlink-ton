name: Temp MyLocalTON Test - Prebuilt Images

on:
  push:
    branches:
      - feature/mylocalton
  pull_request:

jobs:
  test-localnet:
    name: Testing MyLocalTON
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install Nix
        uses: cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f # v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # simple genesis state cache
      - name: Cache genesis state
        id: cache-genesis
        uses: actions/cache@v4
        with:
          path: ~/.ton-genesis
          key: ${{ runner.os }}-ton-genesis-${{ hashFiles('docker-compose.yaml') }}

      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Mirror prebuilt images
        run: |
          TARGET_REGISTRY="ghcr.io/${{ github.repository }}"
          IMAGES=(
            "ghcr.io/neodix42/mylocalton-docker:latest"
            "ghcr.io/neodix42/ton-http-api:latest"
            "ghcr.io/neodix42/mylocalton-docker-faucet:latest"
            "redis:latest"
            "postgres:17"
            "toncenter/ton-indexer-classifier:v1.2.0-test"
            "toncenter/ton-indexer-api:v1.2.0-test"
            "toncenter/ton-indexer-worker:v1.2.0-test"
          )

          echo "Starting parallel image mirroring..."
          pids=()

          for IMG in "${IMAGES[@]}"; do
            (
              NAME=$(basename "${IMG%%:*}")
              TAG="${IMG##*:}"
              SRC="docker://${IMG}"
              DST="docker://${TARGET_REGISTRY}/mylocalton-${NAME}:${TAG}"

              # check if image is already in our registry
              if skopeo inspect "$DST" &>/dev/null; then
                echo "✓ Image already cached: ${DST}"
              else
                echo "→ Mirroring: $IMG → ${DST}"
                skopeo copy --all --retry-times=3 "$SRC" "$DST"
                echo "✓ Mirroring complete"
              fi

              echo "→ Pulling locally: ${DST}"
              docker pull "${TARGET_REGISTRY}/mylocalton-${NAME}:${TAG}"

              echo "→ Tagging: ${IMG}"
              docker tag "${TARGET_REGISTRY}/mylocalton-${NAME}:${TAG}" "${IMG}"
            ) &
            pids+=($!)
          done

          wait "${pids[@]}"
          echo "All images processed and ready to use"

      # handle genesis state restoration
      - name: Setup genesis state
        run: |
          # create docker volumes
          docker volume create ton-db
          docker volume create shared-data
          docker volume create postgres-data
          docker volume create index-workdir

          # if we have cached genesis state, restore it
          if [ "${{ steps.cache-genesis.outputs.cache-hit }}" == "true" ]; then
            echo "Restoring genesis state from cache"
            # use busybox for fast copying
            docker run --rm -v ton-db:/data -v $HOME/.ton-genesis/ton-db:/cache busybox cp -r /cache/. /data/
            docker run --rm -v shared-data:/data -v $HOME/.ton-genesis/shared-data:/cache busybox cp -r /cache/. /data/
            docker run --rm -v postgres-data:/data -v $HOME/.ton-genesis/postgres-data:/cache busybox cp -r /cache/. /data/
            docker run --rm -v index-workdir:/data -v $HOME/.ton-genesis/index-workdir:/cache busybox cp -r /cache/. /data/
            echo "Genesis state restored"
          else
            echo "No cached genesis state found, will generate fresh"
          fi

      # start the TON network
      - name: Start TON Local Network
        run: |
          # use our docker volumes
          export COMPOSE_PROJECT_NAME=ton-localnet

          chmod +x scripts/localnet/localnet-up.sh
          scripts/localnet/localnet-up.sh

          # if we didn't have cache, create it for next time
          if [ "${{ steps.cache-genesis.outputs.cache-hit }}" != "true" ]; then
            echo "Saving genesis state for next run"
            mkdir -p $HOME/.ton-genesis/{ton-db,shared-data,postgres-data,index-workdir}

            # use busybox for fast copying
            docker run --rm -v ton-db:/data -v $HOME/.ton-genesis/ton-db:/cache busybox cp -r /data/. /cache/
            docker run --rm -v shared-data:/data -v $HOME/.ton-genesis/shared-data:/cache busybox cp -r /data/. /cache/
            docker run --rm -v postgres-data:/data -v $HOME/.ton-genesis/postgres-data:/cache busybox cp -r /data/. /cache/
            docker run --rm -v index-workdir:/data -v $HOME/.ton-genesis/index-workdir:/cache busybox cp -r /data/. /cache/
            echo "Genesis state saved"
          fi

      - name: Run build
        run: |
          pushd contracts
          nix develop .#contracts -c yarn && yarn build

      - name: Run tests
        run: |
          pushd contracts
          nix develop .#contracts -c yarn test