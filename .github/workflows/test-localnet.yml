name: Temp MyLocalTON Test - Prebuilt Images

on:
  push:
    branches:
      - feature/mylocalton
  pull_request:

jobs:
  test-localnet:
    name: Testing MyLocalTON
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install Nix
        uses: cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f # v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker volumes
        id: cache-volumes
        uses: actions/cache@v4
        with:
          path: ~/.ton-volumes
          key: ${{ runner.os }}-ton-volumes-${{ hashFiles('docker-compose.yaml') }}
          restore-keys: |
            ${{ runner.os }}-ton-volumes-

      # Prepare cache directory
      - name: Prepare cache directory and set env vars
        run: |
          mkdir -p ~/.ton-volumes

          # Set up bind mounts if we have cached volumes
          if [ "${{ steps.cache-volumes.outputs.cache-hit }}" == "true" ]; then
            echo "Using cached volumes from previous run"
            
            # Create volume subdirectories if they don't exist

            mkdir -p ~/.ton-volumes/{shared-data,ton-db,postgres-data,index-workdir}
            
            # Set env vars for volume bind mounts (to both current shell and GITHUB_ENV)
            echo "VOLUME_DRIVER=local" >> $GITHUB_ENV
            echo "SHARED_DATA_O_OPT=bind" >> $GITHUB_ENV
            echo "SHARED_DATA_TYPE_OPT=none" >> $GITHUB_ENV
            echo "SHARED_DATA_DEVICE_OPT=$HOME/.ton-volumes/shared-data" >> $GITHUB_ENV

            echo "TON_DB_O_OPT=bind" >> $GITHUB_ENV
            echo "TON_DB_TYPE_OPT=none" >> $GITHUB_ENV
            echo "TON_DB_DEVICE_OPT=$HOME/.ton-volumes/ton-db" >> $GITHUB_ENV

            echo "POSTGRES_DATA_O_OPT=bind" >> $GITHUB_ENV
            echo "POSTGRES_DATA_TYPE_OPT=none" >> $GITHUB_ENV
            echo "POSTGRES_DATA_DEVICE_OPT=$HOME/.ton-volumes/postgres-data" >> $GITHUB_ENV

            echo "INDEX_WORKDIR_O_OPT=bind" >> $GITHUB_ENV
            echo "INDEX_WORKDIR_TYPE_OPT=none" >> $GITHUB_ENV
            echo "INDEX_WORKDIR_DEVICE_OPT=$HOME/.ton-volumes/index-workdir" >> $GITHUB_ENV
            
            # Also set COMPOSE_PROJECT_NAME to ensure consistent volume naming
            echo "COMPOSE_PROJECT_NAME=mylocalton" >> $GITHUB_ENV
            export COMPOSE_PROJECT_NAME=mylocalton
          else
            echo "First run - will use default volumes and cache afterward"
          fi

      # Pull and tag images
      - name: Mirror prebuilt images to GHCR
        uses: docker/build-push-action@v3
        with:
          pull: true
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/mylocalton-docker:latest
            ghcr.io/${{ github.repository }}/mylocalton-ton-http-api:latest
            ghcr.io/${{ github.repository }}/mylocalton-docker-faucet:latest
            ghcr.io/${{ github.repository }}/mylocalton-redis:latest
            ghcr.io/${{ github.repository }}/mylocalton-postgres:17
            ghcr.io/${{ github.repository }}/mylocalton-ton-indexer-classifier:v1.2.0-test
            ghcr.io/${{ github.repository }}/mylocalton-ton-indexer-api:v1.2.0-test
            ghcr.io/${{ github.repository }}/mylocalton-ton-indexer-worker:v1.2.0-test
      
      # Start TON network and measure startup time
      - name: Start TON Local Network
        id: ton-startup
        run: |
          chmod +x scripts/localnet-up.sh
          scripts/localnet-up.sh
          
          # If this is the first run, copy volume data for future cache
          if [ "${{ steps.cache-volumes.outputs.cache-hit }}" != "true" ]; then
            echo "Caching volumes for future runs"
            mkdir -p ~/.ton-volumes/{shared-data,ton-db,postgres-data,index-workdir}
            
            # Copy container data directly
            docker cp genesis:/usr/share/data/. ~/.ton-volumes/shared-data/
            docker cp genesis:/var/ton-work/db/. ~/.ton-volumes/ton-db/
            docker cp index-postgres:/var/lib/postgresql/data/. ~/.ton-volumes/postgres-data/
            docker cp index-worker:/workdir/. ~/.ton-volumes/index-workdir/
            
            # Set permissions
            chmod -R 777 ~/.ton-volumes
          fi