name: Temp MyLocalTON Test - Prebuilt Images

on:
  push:
    branches:
      - feature/mylocalton
  pull_request:

jobs:
  test-localnet:
    name: Testing MyLocalTON
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install Nix
        uses: cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f # v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cache TON volumes for faster startup
      - name: Check for cached volumes
        id: cache-volumes
        uses: actions/cache@v4
        with:
          path: ~/.ton-volumes
          key: ${{ runner.os }}-ton-volumes-${{ hashFiles('docker-compose.yaml') }}
          restore-keys: |
            ${{ runner.os }}-ton-volumes-

      - name: Prepare bind mounts
        run: |
          if [ "${{ steps.cache-volumes.outputs.cache-hit }}" == "true" ]; then
            echo "Using cached volumes from previous run"
          else
            echo "No cached volumes found - will generate fresh state"
          fi
          
          # set up bind mounts via environment variables
          echo "VOLUME_DRIVER=local" >> $GITHUB_ENV
          echo "SHARED_DATA_O_OPT=bind" >> $GITHUB_ENV
          echo "SHARED_DATA_TYPE_OPT=none" >> $GITHUB_ENV
          echo "SHARED_DATA_DEVICE_OPT=$HOME/.ton-volumes/shared-data" >> $GITHUB_ENV
          echo "TON_DB_O_OPT=bind" >> $GITHUB_ENV
          echo "TON_DB_TYPE_OPT=none" >> $GITHUB_ENV
          echo "TON_DB_DEVICE_OPT=$HOME/.ton-volumes/ton-db" >> $GITHUB_ENV
          echo "POSTGRES_DATA_O_OPT=bind" >> $GITHUB_ENV
          echo "POSTGRES_DATA_TYPE_OPT=none" >> $GITHUB_ENV
          echo "POSTGRES_DATA_DEVICE_OPT=$HOME/.ton-volumes/postgres-data" >> $GITHUB_ENV
          echo "INDEX_WORKDIR_O_OPT=bind" >> $GITHUB_ENV
          echo "INDEX_WORKDIR_TYPE_OPT=none" >> $GITHUB_ENV
          echo "INDEX_WORKDIR_DEVICE_OPT=$HOME/.ton-volumes/index-workdir" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=ton-localnet" >> $GITHUB_ENV

      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Mirror prebuilt images
        run: |
          TARGET_REGISTRY="ghcr.io/${{ github.repository }}"
          IMAGES=(
            "ghcr.io/neodix42/mylocalton-docker:latest"
            "ghcr.io/neodix42/ton-http-api:latest"
            "ghcr.io/neodix42/mylocalton-docker-faucet:latest"
            "redis:latest"
            "postgres:17"
            "toncenter/ton-indexer-classifier:v1.2.0-test"
            "toncenter/ton-indexer-api:v1.2.0-test"
            "toncenter/ton-indexer-worker:v1.2.0-test"
          )

          echo "Starting parallel image mirroring..."
          pids=()

          for IMG in "${IMAGES[@]}"; do
            (
              NAME=$(basename "${IMG%%:*}")
              TAG="${IMG##*:}"
              SRC="docker://${IMG}"
              DST="docker://${TARGET_REGISTRY}/mylocalton-${NAME}:${TAG}"

              # Check if image is already in our registry
              if skopeo inspect "$DST" &>/dev/null; then
                echo "✓ Image already cached: ${DST}"
              else
                echo "→ Mirroring: $IMG → ${DST}"
                skopeo copy --all --retry-times=3 "$SRC" "$DST"
                echo "✓ Mirroring complete"
              fi

              echo "→ Pulling locally: ${DST}"
              docker pull "${TARGET_REGISTRY}/mylocalton-${NAME}:${TAG}"
              
              echo "→ Tagging: ${IMG}"
              docker tag "${TARGET_REGISTRY}/mylocalton-${NAME}:${TAG}" "${IMG}"
              
              echo "✔ Processed: ${NAME}:${TAG}"
            ) &
            pids+=($!)
          done

          wait "${pids[@]}"
          echo "All images processed and ready to use"

      # Start TON Network and cache volumes if needed
      - name: Start TON Local Network
        run: |
          chmod +x scripts/localnet/localnet-up.sh
          scripts/localnet/localnet-up.sh
          
          if [ "${{ steps.cache-volumes.outputs.cache-hit }}" != "true" ]; then
            echo "Caching volumes for future runs"
            
            mkdir -p ~/.ton-volumes/{shared-data,ton-db,postgres-data,index-workdir}

            docker cp genesis:/usr/share/data/. ~/.ton-volumes/shared-data/
            docker cp genesis:/var/ton-work/db/. ~/.ton-volumes/ton-db/
            docker cp index-postgres:/var/lib/postgresql/data/. ~/.ton-volumes/postgres-data/
            docker cp index-worker:/workdir/. ~/.ton-volumes/index-workdir/

            chmod -R 777 ~/.ton-volumes
          fi

      - name: Run build
        run: |
          pushd contracts
          nix develop .#contracts -c yarn && yarn build

      - name: Run tests
        run: |
          pushd contracts
          nix develop .#contracts -c yarn test